/*
 */
package yarnandtail.andhow.load;

import yarnandtail.andhow.AndHow;
import yarnandtail.andhow.ConfigSamplePrinter;
import yarnandtail.andhow.Property;
import yarnandtail.andhow.PropertyGroup;
import static yarnandtail.andhow.ReportGenerator.DEFAULT_LINE_WIDTH;
import yarnandtail.andhow.TextUtil;

/**
 *
 * @author ericeverman
 */
public class PropFileLoaderSamplePrinter extends BaseSamplePrinter implements ConfigSamplePrinter {
	
	@Override
	public String getSampleFileStart() {
		return null;
	}
	
	@Override
	public String getBlockCommentStart() {
		return null;
	}
	
	@Override
	public String getBlockCommentEnd() {
		return null;
	}
	
	@Override
	public String getLineCommentPrefix() {
		return "# ";
	}
	
	@Override
	public String getSectionHeader() {
		return TextUtil.repeat("#", DEFAULT_LINE_WIDTH);
	}
	
	@Override
	public String getSampleStartIntro() {
		return TextUtil.padRight("# Sample properties file generated by " + 
				AndHow.ANDHOW_NAME + "  " + AndHow.ANDHOW_TAG_LINE + "  ", "#", DEFAULT_LINE_WIDTH);
	}
	
	@Override
	public String getSampleStartDescription() {
		return TextUtil.padRight(TextUtil.repeat("#", 50) + "  " + AndHow.ANDHOW_URL + " ", "#", DEFAULT_LINE_WIDTH);
	}
	
	@Override
	public String getActualProperty(Class<? extends PropertyGroup> group, Property prop) throws Exception {
		
		String propCanonName = PropertyGroup.getCanonicalName(group, prop);
		
		if (prop.getDefaultValue() != null) {
			return TextUtil.format("{} = {}", 
					propCanonName, 
					prop.getDefaultValue());
		} else {
			return TextUtil.format("{} = [{}]", 
					propCanonName, 
					prop.getValueType().getDestinationType().getSimpleName());
		}
	}
	
	@Override
	public String getPropertyGroupEnd() {
		return null;
	}

	
	@Override
	public String getSampleFileEnd() {
		return null;
	}

	
}
