package yarnandtail.andhow.sample;

import yarnandtail.andhow.AndHow;
import yarnandtail.andhow.NamingStrategy;
import yarnandtail.andhow.Property;
import yarnandtail.andhow.PropertyGroup;
import yarnandtail.andhow.util.TextUtil;
import yarnandtail.andhow.SamplePrinter;

/**
 *
 * @author ericeverman
 */
public class JndiLoaderSamplePrinter extends BaseSamplePrinter implements SamplePrinter {
	protected PrintFormat format;
	
	public JndiLoaderSamplePrinter() {
		format = new PrintFormat();
		format.blockCommentStart = "<!--";
		format.blockCommentEnd = "-->";
		format.blockCommentSeparator = " "; //Use between the last text and the comment end if on same line
		format.lineCommentPrefix = null;
		format.lineCommentPrefixSeparator = " ";	//Separate the opening line comment from the text
		format.secondLineIndent = "\t";
		format.hr = TextUtil.repeat("- ", 45);
		format.lineWidth = 90;
	}
	
	@Override
	public PrintFormat getFormat() {
		return format;
	}
	
	@Override
	public TextBlock getSampleFileStart() {
		TextBlock tb = new TextBlock(false, false);
		tb.addLine("<Context>");
		return tb;
	}
	
	@Override
	public TextBlock getSampleStartComment() {
		TextBlock tb = new TextBlock(true, true);
		tb.addLine("Sample JNDI config file generated by " +  AndHow.ANDHOW_NAME);
		tb.addLine(AndHow.ANDHOW_TAG_LINE + "  -  " + AndHow.ANDHOW_URL);
		tb.addLine("This sample uses Tomcat syntax. JNDI configuration for other app containers will be similar but different.");
		return tb;
	}
	
	@Override
	public TextBlock getActualProperty(Class<? extends PropertyGroup> group, Property prop) throws Exception {
		
		TextBlock tb = new TextBlock(false, false);
		
		String propCanonName = NamingStrategy.getUriName(PropertyGroup.getCanonicalName(group, prop));
		String type = prop.getValueType().getDestinationType().getCanonicalName();

		
		if (prop.getDefaultValue() != null) {
			tb.addLine(
					TextUtil.format("<Environment name=\"{}\" value=\"{}\" type=\"{}\" override=\"false\"/>", 
						propCanonName, 
						prop.getDefaultValue(),
						type)
			);
		} else {
			tb.addLine(
					TextUtil.format("<Environment name=\"{}\" value=\"{}\" type=\"[{}]\" override=\"false\"/>", 
						propCanonName, 
						prop.getValueType().getDestinationType().getSimpleName(),
						type)
			);
		}
		
		return tb;
	}

	@Override
	public TextBlock getSampleFileEnd() {
		TextBlock tb = new TextBlock(false, false);
		tb.addLine("</Context>");
		return tb;
	}
}
